/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!***************************************!*\
  !*** ./src/assets/js/search-admin.js ***!
  \***************************************/
(function ($) {
  function delay(callback, ms) {
    var timer = 0;
    return function () {
      var context = this,
        args = arguments;
      clearTimeout(timer);
      timer = setTimeout(function () {
        callback.apply(context, args);
      }, ms || 0);
    };
  }
  $('#videotuber_post_metabox #videotuber_admin_search input').keyup(delay(doAjax, 1000));
  function doAjax() {
    var q = $('#videotuber_post_metabox #videotuber_admin_search input').val();
    console.log(q);
    data = {
      action: 'videotuber_call_api_by_keyword',
      q: q
    };
    $.ajax({
      url: WPR.ajax_url,
      type: 'GET',
      data: data,
      success: function success(response) {
        $('#videotuber_select').empty();
        console.log(response);
        if (response.items) {
          for (var i = 0; i < response.items.length; i++) {
            var html = "\n                        <option id=\"".concat(response.items[i]['id']['videoId'], "\" title=\"").concat(response.items[i]['snippet']['title'], "\" image-url=\"").concat(response.items[i]['snippet']['thumbnails']['high']['url'], "\">").concat(response.items[i]['snippet']['title'], "</option>\n                        ");
            $('#videotuber_select').append(html);
          }
        }
      },
      complete: function complete() {
        $('#videotuber_select').on('change', function () {
          var videoId = $("#videotuber_select").find(':selected').attr('id');
          var title = $("#videotuber_select").find(':selected').attr('title');
          var imageUrl = $("#videotuber_select").find(':selected').attr('image-url');
          data = {
            action: 'videotuber_change_post',
            image: imageUrl
          };
          $.ajax({
            url: WPR.ajax_url,
            type: 'GET',
            data: data
          });
          // var test = option.attr('id', $(this).find(':selected').data('id'));
          // console.log(videoId); 
          // console.log(title); 
          // console.log(imageUrl); 
        });
      }
    });
  }
})(jQuery);
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFJLEdBQUc7WUFDSEMsTUFBTSxFQUFFLHdCQUF3QjtZQUNoQ3FCLEtBQUssRUFBRUQ7VUFDWCxDQUFDO1VBQ0R0QyxDQUFDLENBQUNtQixJQUFJLENBQUM7WUFDSEMsR0FBRyxFQUFFQyxHQUFHLENBQUNDLFFBQVE7WUFDakJDLElBQUksRUFBRSxLQUFLO1lBQ1hOLElBQUksRUFBRUE7VUFDVixDQUFDLENBQUM7VUFDRjtVQUNBO1VBQ0E7VUFDQTtRQUdKLENBQUMsQ0FBQztNQUVOO0lBQ0osQ0FBQyxDQUFDO0VBQ0o7QUFDTixDQUFDLEVBQUV1QixNQUFNLENBQUMsQyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpZGVvdHViZXIvLi9zcmMvYXNzZXRzL2pzL3NlYXJjaC1hZG1pbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oJCl7XHJcbiAgICBmdW5jdGlvbiBkZWxheShjYWxsYmFjaywgbXMpIHtcclxuICAgICAgICB2YXIgdGltZXIgPSAwO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHZhciBjb250ZXh0ID0gdGhpcywgYXJncyA9IGFyZ3VtZW50cztcclxuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XHJcbiAgICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseShjb250ZXh0LCBhcmdzKTtcclxuICAgICAgICAgIH0sIG1zIHx8IDApO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICQoJyN2aWRlb3R1YmVyX3Bvc3RfbWV0YWJveCAjdmlkZW90dWJlcl9hZG1pbl9zZWFyY2ggaW5wdXQnKS5rZXl1cChkZWxheShkb0FqYXgsIDEwMDApKTtcclxuXHJcbiAgICAgIGZ1bmN0aW9uIGRvQWpheCgpIHtcclxuICAgICAgICB2YXIgcSA9ICQoJyN2aWRlb3R1YmVyX3Bvc3RfbWV0YWJveCAjdmlkZW90dWJlcl9hZG1pbl9zZWFyY2ggaW5wdXQnKS52YWwoKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhxKTtcclxuICAgICAgICBkYXRhID0ge1xyXG4gICAgICAgICAgICBhY3Rpb246ICd2aWRlb3R1YmVyX2NhbGxfYXBpX2J5X2tleXdvcmQnLFxyXG4gICAgICAgICAgICBxOiBxLFxyXG4gICAgICAgIH1cclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IFdQUi5hamF4X3VybCwgXHJcbiAgICAgICAgICAgIHR5cGU6ICdHRVQnLCBcclxuICAgICAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzcG9uc2Upe1xyXG4gICAgICAgICAgICAgICAgJCgnI3ZpZGVvdHViZXJfc2VsZWN0JykuZW1wdHkoKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5pdGVtcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzcG9uc2UuaXRlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGh0bWwgPSBgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gaWQ9XCIke3Jlc3BvbnNlLml0ZW1zW2ldWydpZCddWyd2aWRlb0lkJ119XCIgdGl0bGU9XCIke3Jlc3BvbnNlLml0ZW1zW2ldWydzbmlwcGV0J11bJ3RpdGxlJ119XCIgaW1hZ2UtdXJsPVwiJHtyZXNwb25zZS5pdGVtc1tpXVsnc25pcHBldCddWyd0aHVtYm5haWxzJ11bJ2hpZ2gnXVsndXJsJ119XCI+JHtyZXNwb25zZS5pdGVtc1tpXVsnc25pcHBldCddWyd0aXRsZSddfTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjdmlkZW90dWJlcl9zZWxlY3QnKS5hcHBlbmQoaHRtbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29tcGxldGU6ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICQoJyN2aWRlb3R1YmVyX3NlbGVjdCcpLm9uKCdjaGFuZ2UnLGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpZGVvSWQgPSAkKFwiI3ZpZGVvdHViZXJfc2VsZWN0XCIpLmZpbmQoJzpzZWxlY3RlZCcpLmF0dHIoJ2lkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpdGxlID0gJChcIiN2aWRlb3R1YmVyX3NlbGVjdFwiKS5maW5kKCc6c2VsZWN0ZWQnKS5hdHRyKCd0aXRsZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbWFnZVVybCA9ICQoXCIjdmlkZW90dWJlcl9zZWxlY3RcIikuZmluZCgnOnNlbGVjdGVkJykuYXR0cignaW1hZ2UtdXJsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAndmlkZW90dWJlcl9jaGFuZ2VfcG9zdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiBpbWFnZVVybCwgXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogV1BSLmFqYXhfdXJsLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0dFVCcsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdmFyIHRlc3QgPSBvcHRpb24uYXR0cignaWQnLCAkKHRoaXMpLmZpbmQoJzpzZWxlY3RlZCcpLmRhdGEoJ2lkJykpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHZpZGVvSWQpOyBcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aXRsZSk7IFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGltYWdlVXJsKTsgXHJcblxyXG5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxufSkoalF1ZXJ5KTsiXSwibmFtZXMiOlsiJCIsImRlbGF5IiwiY2FsbGJhY2siLCJtcyIsInRpbWVyIiwiY29udGV4dCIsImFyZ3MiLCJhcmd1bWVudHMiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYXBwbHkiLCJrZXl1cCIsImRvQWpheCIsInEiLCJ2YWwiLCJjb25zb2xlIiwibG9nIiwiZGF0YSIsImFjdGlvbiIsImFqYXgiLCJ1cmwiLCJXUFIiLCJhamF4X3VybCIsInR5cGUiLCJzdWNjZXNzIiwicmVzcG9uc2UiLCJlbXB0eSIsIml0ZW1zIiwiaSIsImxlbmd0aCIsImh0bWwiLCJhcHBlbmQiLCJjb21wbGV0ZSIsIm9uIiwidmlkZW9JZCIsImZpbmQiLCJhdHRyIiwidGl0bGUiLCJpbWFnZVVybCIsImltYWdlIiwialF1ZXJ5Il0sInNvdXJjZVJvb3QiOiIifQ==